{
  "project_name": "Trade Journal Monorepo",
  "description": "A trade journaling application built with an Electron backend and a React frontend, managed as a pnpm monorepo.",
  "global_guidelines": {
    "making_changes": [
      "Identify if changes affect the Electron backend, React frontend, or both.",
      "For backend database schema changes, create new SQL migration files in 'packages/electron-app/src/database/migrations/'.",
      "Update IPC interfaces in 'electron-app/main.js', 'electron-app/preload.js', and 'react-app/src/types/index.ts' (ElectronAPIDefinition) consistently.",
      "For frontend state, modify 'react-app/src/stores/appStore.ts'.",
      "Adhere to styling conventions: Tailwind CSS for layout, MUI 'sx' prop with theme tokens for MUI components.",
      "Follow testing procedures: Jest for backend services, visual/unit tests for frontend, and E2E testing for integrated features.",
      "Run linters and type checkers before committing changes."
    ],
    "sensitive_areas_overview": [
      "Database services in 'packages/electron-app/src/database/', especially tradeService.js (P&L calculation, state recalculation), transactionService.js, and analyticsService.js.",
      "Database schema ('packages/electron-app/src/database/migrations/') and migration logic ('packages/electron-app/src/database/migrationService.js').",
      "IPC Layer: 'packages/electron-app/main.js' (ipcMain), 'packages/electron-app/preload.js', and frontend 'window.electronAPI' calls.",
      "React global state: 'packages/react-app/src/stores/appStore.ts'.",
      "Core type definitions: 'packages/react-app/src/types/index.ts'."
    ]
  },
  "include_patterns": [
    "packages/electron-app/**/*.js",
    "packages/electron-app/**/*.sql",
    "packages/react-app/**/*.ts",
    "packages/react-app/**/*.tsx",
    "packages/react-app/**/*.css",
    "package.json",
    "packages/*/package.json",
    "pnpm-lock.yaml",
    "pnpm-workspace.yaml",
    "vite.config.ts",
    "tailwind.config.js",
    "postcss.config.js",
    "eslint.config.js",
    "README.md"
  ],
  "exclude_patterns": [
    "**/dist/**",
    "**/node_modules/**",
    "**/*.log",
    "packages/react-app/tsconfig.tsbuildinfo",
    "*.local",
    ".vscode/*",
    "!.vscode/extensions.json",
    ".idea/**",
    ".DS_Store",
    "*.suo",
    "*.ntvs*",
    "*.njsproj",
    "*.sln",
    "*.sw?"
  ],
  "rules": [
    {
      "name": "Root Configuration",
      "patterns": [
        "package.json",
        "pnpm-workspace.yaml",
        "pnpm-lock.yaml"
      ],
      "description": "Root project configuration, scripts, and workspace definitions.",
      "responsibilities": [
        "Define monorepo structure[cite: 1].",
        "Manage root dependencies and scripts[cite: 27, 28].",
        "Lock dependency versions."
      ],
      "dependencies": ["pnpm", "concurrently", "wait-on", "electron-rebuild", "nodemon"],
      "key_config_points": ["pnpm-workspace.yaml: declares packages.", "package.json scripts: 'dev' orchestrates combined frontend/backend start."],
      "notes_and_warnings": ["pnpm-lock.yaml ensures reproducible builds."]
    },
    {
      "name": "Electron App: Main Process",
      "patterns": ["packages/electron-app/main.js"],
      "description": "Entry point for the Electron application. Manages application lifecycle, main browser window, Content Security Policy, database initialization, and IPC handlers for communication with the renderer process[cite: 315].",
      "responsibilities": [
        "Application lifecycle management (ready, window-all-closed, activate)[cite: 320, 321, 322].",
        "BrowserWindow creation and configuration, including webPreferences and preload script path[cite: 316].",
        "Setting Content Security Policy (CSP) headers[cite: 317, 318].",
        "Loading renderer URL (dev server or production build)[cite: 319, 320].",
        "Initializing the database via the dbModule facade[cite: 315, 320].",
        "Defining IPC handlers (`ipcMain.handle`) to expose backend functionalities to the renderer process."
      ],
      "dependencies": [
        "electron (app, BrowserWindow, ipcMain) [cite: 315]",
        "path",
        "./src/database/db (dbModule facade) [cite: 315]"
      ],
      "key_config_points": [
        "dbPath: Constructed from `app.getPath('userData')`[cite: 316].",
        "NODE_ENV: Determines URL to load and if DevTools are opened[cite: 319, 338]."
      ],
      "notes_and_warnings": [
        "IPC handlers are critical; ensure method names and parameters match `preload.js` and frontend calls.",
        "CSP is important for security; changes need careful consideration[cite: 317, 318]."
      ],
      "guidelines_for_changes": [
        "When adding new backend functionality, create an IPC handler here.",
        "Update CSP if new external resources or inline script allowances are needed."
      ]
    },
    {
      "name": "Electron App: Preload Script",
      "patterns": ["packages/electron-app/preload.js"],
      "description": "Securely exposes specific IPC invokers from the main process to the renderer process under `window.electronAPI`[cite: 340]. Essential for context isolation.",
      "responsibilities": [
        "Bridge communication between main and renderer processes via `ipcRenderer.invoke`.",
        "Define the `window.electronAPI` object with functions callable from the React app[cite: 340]."
      ],
      "dependencies": ["electron (contextBridge, ipcRenderer)"],
      "notes_and_warnings": ["Only expose necessary functions to minimize security risks.", "Ensure function names match IPC handlers in `main.js` and `ElectronAPIDefinition` type."],
      "guidelines_for_changes": ["When adding a new IPC handler in `main.js`, expose it here and update `ElectronAPIDefinition`."]
    },
    {
      "name": "Electron App: Database Connection",
      "patterns": ["packages/electron-app/src/database/connection.js"],
      "description": "Manages the SQLite database connection using `better-sqlite3`. Handles initialization, applying migrations, seeding initial data (emotions), and providing access to the DB instance[cite: 419, 420].",
      "responsibilities": [
        "`initializeDatabase`: Opens/creates DB, sets PRAGMAs, runs migrations, seeds data.",
        "`getDb`: Provides the active DB instance[cite: 432].",
        "`closeDatabase`: Closes the DB connection[cite: 433].",
        "`seedInitialData`: Populates initial emotions.",
        "`testDbConnection`: Checks DB connection status."
      ],
      "dependencies": ["better-sqlite3 [cite: 419]", "path", "fs", "./migrationService [cite: 420]"],
      "key_config_points": ["Database file path (passed to `initializeDatabase`).", "Initial seed data (emotions list)[cite: 421]."],
      "notes_and_warnings": ["Ensures foreign_keys = ON and journal_mode = WAL for database integrity and performance."]
    },
    {
      "name": "Electron App: Database Facade",
      "patterns": ["packages/electron-app/src/database/db.js"],
      "description": "Acts as a unified interface (facade) for all database operations by re-exporting functions from various service modules. Simplifies calls from IPC handlers in `main.js`[cite: 438, 439].",
      "responsibilities": ["Provide a single point of access to database functionalities exposed by different services."],
      "dependencies": [
        "./connection [cite: 438]",
        "./tradeService [cite: 438]",
        "./transactionService [cite: 438]",
        "./emotionService [cite: 438]",
        "./analyticsService [cite: 439]"
      ],
      "guidelines_for_changes": ["If a new service is added, re-export its public methods here for `main.js` consumption."]
    },
    {
      "name": "Electron App: Database Schema (Definition File)",
      "patterns": ["packages/electron-app/src/database/schema.js"],
      "description": "Contains SQL DDL strings for initial table creation (accounts, strategies, emotions, trades, transactions, etc.) and triggers. The `createTables` function is mostly for ensuring `schema_migrations` table existence, actual schema is managed by migrations.",
      "responsibilities": ["Define the structure of database tables as SQL strings."],
      "dependencies": [],
      "notes_and_warnings": ["This file primarily serves as a reference for the initial schema defined in `001_initial_schema.sql`. Schema changes should go into new migration files."]
    },
    {
      "name": "Electron App: Database Migration Service",
      "patterns": ["packages/electron-app/src/database/migrationService.js"],
      "description": "Manages and applies database schema migrations from SQL files located in the `migrations/` directory[cite: 451].",
      "responsibilities": [
        "Create `schema_migrations` table if it doesn't exist[cite: 452].",
        "Read available migration files from `migrations/` directory[cite: 454].",
        "Check against applied migrations and execute new ones in sorted order."
      ],
      "dependencies": ["fs", "path"],
      "guidelines_for_changes": ["Ensure new migration SQL files are correctly named and placed in `migrations/`. The service applies them based on filename sorting."]
    },
    {
      "name": "Electron App: Database Migrations",
      "patterns": ["packages/electron-app/src/database/migrations/*.sql"],
      "description": "SQL files defining database schema changes. Applied sequentially by `migrationService.js`.",
      "responsibilities": [
        "`001_initial_schema.sql`: Defines all initial tables and triggers.",
        "`002_add_latest_trade_column.sql`: Adds `latest_trade` column to `trades` table[cite: 611]."
      ],
      "dependencies": ["SQL (SQLite dialect)"],
      "guidelines_for_changes": ["Create new numerically prefixed SQL files for schema changes. Test migrations thoroughly."]
    },
    {
      "name": "Electron App: Trade Service",
      "patterns": ["packages/electron-app/src/database/tradeService.js"],
      "description": "Handles business logic related to trades, including P&L calculations, state management, and CRUD operations for trades.",
      "responsibilities": [
        "`calculateTradePnlFifoEnhanced`: Core FIFO P&L calculation for realized/unrealized P&L, open quantity, avg open price, R-multiple, duration, outcome.",
        "`_recalculateTradeState`: Updates trade status, dates, fees based on transactions; deletes trade if no transactions.",
        "`updateMarkToMarketPrice`: Updates `current_market_price` for open trades and recalculates unrealized P&L.",
        "`WorkspaceTradesForListView`: Fetches latest trades for list display, including P&L details.",
        "`WorkspaceTradeWithTransactions`: Retrieves a trade with all its transactions and their emotions.",
        "`updateTradeMetadata`: Updates descriptive fields of a trade.",
        "`deleteFullTradeAndTransactions`: Deletes a trade and associated data."
      ],
      "dependencies": ["./connection"],
      "notes_and_warnings": ["`calculateTradePnlFifoEnhanced` and `_recalculateTradeState` are complex and critical for data accuracy. High interdependency with `transactionService.js`."],
      "guidelines_for_changes": ["Changes to P&L logic or trade state require thorough testing. Ensure consistency with `transactionService.js`."]
    },
    {
      "name": "Electron App: Transaction Service",
      "patterns": ["packages/electron-app/src/database/transactionService.js"],
      "description": "Manages transaction logging, updates, and deletions. Interacts closely with `tradeService` to maintain trade state.",
      "responsibilities": [
        "`addTransactionAndManageTrade`: Adds new transaction, creates new trade if needed, validates exit quantities, links emotions, and calls `tradeService._recalculateTradeState`.",
        "`updateSingleTransaction`: Updates an existing transaction's details and emotions, then recalculates trade state.",
        "`deleteSingleTransaction`: Deletes a transaction and recalculates trade state."
      ],
      "dependencies": ["./connection", "./tradeService [cite: 554]"],
      "notes_and_warnings": ["Logic for creating new trades based on first transaction is critical. Input validation for transactions is important."],
      "guidelines_for_changes": ["Ensure `_recalculateTradeState` is called after any mutation. Validate all inputs thoroughly."]
    },
    {
      "name": "Electron App: Emotion Service",
      "patterns": ["packages/electron-app/src/database/emotionService.js"],
      "description": "Handles CRUD operations for emotions and their linkage to trades.",
      "responsibilities": [
        "`getEmotions`: Fetches all available emotions[cite: 442].",
        "`getEmotionsForTrade`: Retrieves emotions linked to a specific trade.",
        "`saveTradeEmotions`: Updates the set of emotions for a trade."
      ],
      "dependencies": ["./connection"],
      "notes_and_warnings": ["Emotion linkage is to trades, not individual transactions in this service (transaction emotions handled in `transactionService`)."]
    },
    {
      "name": "Electron App: Analytics Service",
      "patterns": ["packages/electron-app/src/database/analyticsService.js"],
      "description": "Calculates and aggregates comprehensive analytics data based on trades and transactions, supporting various filters.",
      "responsibilities": [
        "`calculateAnalyticsData`: Fetches trades based on filters, uses `tradeService.calculateTradePnlFifoEnhanced` for P&L per trade, and computes metrics like total P&L, win rates, streaks, R-multiples, equity curve, max drawdown, and P&L grouped by time/category."
      ],
      "dependencies": ["./connection", "./tradeService [cite: 356]"],
      "notes_and_warnings": ["Complex data aggregation logic. Performance might be a concern for very large datasets. Accuracy depends on `tradeService.calculateTradePnlFifoEnhanced`."],
      "guidelines_for_changes": ["When adding new analytics, ensure calculations are correct and data is properly added to the `AnalyticsData` return type."]
    },
    {
      "name": "Electron App: User DB Migration Script",
      "patterns": ["packages/electron-app/scripts/migrate_user_db.js"],
      "description": "Standalone Node.js script to apply database migrations using the `sqlite3` CLI tool. Determines userData path based on OS.",
      "dependencies": ["path", "fs", "child_process", "os"],
      "notes_and_warnings": ["Relies on `sqlite3` CLI being available. The in-app `migrationService.js` is generally preferred for runtime migrations."]
    },
    {
      "name": "React App: Main Application Component",
      "patterns": ["packages/react-app/src/App.tsx"],
      "description": "Root React component. Sets up overall UI structure, manages view rendering based on `appStore` state, and fetches initial application data.",
      "responsibilities": [
        "Fetch initial data (app version, DB status, trades, emotions) using `WorkspaceInitialAppData` from `appStore`[cite: 644].",
        "`renderView()`: Acts as a simple router, rendering different page components based on `currentView` state."
      ],
      "dependencies": ["react", "./stores/appStore", "./views/*", "./components/layout/AppShell"],
      "notes_and_warnings": ["Manual routing via `currentView` state might become complex as app grows. `react-router-dom` is installed but not fully utilized for this."],
      "guidelines_for_changes": ["New views require adding a case to `renderView()` and updating the `View` type in `appStore.ts`."]
    },
    {
      "name": "React App: Entry Point",
      "patterns": ["packages/react-app/src/main.tsx"],
      "description": "Entry point for the React application. Renders the root `App` component and wraps it with `ThemeProvider` (MUI), `CssBaseline`, and `BrowserRouter`.",
      "dependencies": ["react", "react-dom", "react-router-dom", "./App", "./index.css", "./theme"],
      "notes_and_warnings": ["`React.StrictMode` is commented out."]
    },
    {
      "name": "React App: Global State Store",
      "patterns": ["packages/react-app/src/stores/appStore.ts"],
      "description": "Zustand store for managing global UI state and data. Holds current view, trade data, emotions, app status, analytics data, and associated actions for fetching/updating this data.",
      "responsibilities": [
        "Manage `currentView` and navigation via `MapsTo`[cite: 1260, 1261, 1267].",
        "Store and refresh `trades` and `availableEmotions`.",
        "Store and fetch `analytics` data.",
        "Handle loading and error states for data fetching.",
        "Provide actions for deleting trades (`deleteFullTradeInStore`) and updating mark prices (`updateMarkPriceInStore`) in the local state after backend confirmation."
      ],
      "dependencies": ["zustand", "../types"],
      "key_config_points": ["Initial state values."],
      "notes_and_warnings": ["Central point for frontend data; changes here impact many components."],
      "guidelines_for_changes": ["Ensure asynchronous actions correctly handle loading and error states. Keep types in sync with backend payloads."]
    },
    {
      "name": "React App: Theming and Design Tokens",
      "patterns": [
        "packages/react-app/src/theme.ts",
        "packages/react-app/src/styles/design-tokens.ts",
        "packages/react-app/tailwind.config.js"
      ],
      "description": "Defines the application's visual theme. `design-tokens.ts` exports color, typography, spacing constants. `theme.ts` uses these to create an MUI theme. `tailwind.config.js` integrates these tokens for Tailwind CSS utility classes.",
      "responsibilities": [
        "Establish a consistent color palette, typography scale, and spacing system.",
        "Configure MUI theme.",
        "Configure Tailwind CSS theme."
      ],
      "dependencies": ["@mui/material/styles", "tailwindcss"],
      "key_config_points": ["Color definitions in `design-tokens.ts` are central.", "MUI component overrides in `theme.ts`."],
      "notes_and_warnings": ["Changes to design tokens will have a global impact on the UI."]
    },
    {
      "name": "React App: Type Definitions",
      "patterns": ["packages/react-app/src/types/index.ts", "packages/react-app/src/types.ts"],
      "description": "Centralized TypeScript interfaces for data structures used throughout the React app and for defining the `ElectronAPIDefinition` contract.",
      "responsibilities": ["Define shapes for trades, transactions, analytics data, API payloads, etc."],
      "dependencies": [],
      "notes_and_warnings": ["Critical for maintaining type safety between frontend and backend communications via `ElectronAPIDefinition`."]
    },
    {
      "name": "React App: Analytics API Wrapper",
      "patterns": ["packages/react-app/src/api/analytics.ts"],
      "description": "Provides a typed wrapper function `getAnalyticsData` for calling the corresponding `window.electronAPI` method to fetch analytics data.",
      "dependencies": ["../types"],
      "guidelines_for_changes": ["Use this pattern for other API calls to centralize type handling and error checking."]
    },
    {
      "name": "React App: Analytics Components",
      "patterns": ["packages/react-app/src/components/analytics/*.tsx"],
      "description": "Set of components for displaying various analytics visualizations.",
      "responsibilities": [
        "`EquityCurveChart.tsx`: Renders equity and drawdown using Recharts area chart.",
        "`GroupedPerformanceTable.tsx`: Displays grouped performance data in a table.",
        "`PerformanceByTimeChart.tsx`: Bar chart for performance over time periods.",
        "`PnlVsDurationScatterPlot.tsx`: Scatter plot for P&L vs. trade duration.",
        "`TradeStatsCard.tsx`: Displays aggregate trade statistics."
      ],
      "dependencies": ["recharts", "../../types", "../../styles/design-tokens"],
      "notes_and_warnings": ["Ensure data passed to these components matches expected types from `AnalyticsData`."]
    },
    {
      "name": "React App: Generic Chart Components",
      "patterns": ["packages/react-app/src/components/charts/*.tsx"],
      "description": "Reusable chart components, some currently using mock data.",
      "responsibilities": [
        "`DailyHeatmapCalendar.tsx`: P&L heatmap (mock data).",
        "`DrawdownCurveChart.tsx`: Area chart for drawdown (mock data capable).",
        "`EquityCurveChart.tsx`: Line chart for equity (mock data capable). *Possible duplicate/older version.*",
        "`MonthlyReturnsChart.tsx`: Bar chart for R-multiple distribution (mock data capable). *Name misleading.*",
        "`RiskScatterChart.tsx`: Scatter plot for return vs. risk (mock data capable)."
      ],
      "dependencies": ["recharts", "../../styles/design-tokens"],
      "notes_and_warnings": ["Many components use mock data and need integration with `analyticsService`. Potential for component duplication that needs review."]
    },
    {
      "name": "React App: Dashboard Components",
      "patterns": ["packages/react-app/src/components/dashboard/**/*.tsx"],
      "description": "Components specifically for assembling and displaying the main dashboard.",
      "responsibilities": [
        "`DashboardMetrics.tsx`: Main component for the detailed dashboard view, fetches analytics, manages filters, and lays out metric cards and charts.",
        "`Dashboard.tsx`: Simpler/older dashboard layout, largely uses mock data.",
        "Individual metric cards (e.g., `NetBalanceCard`, `SharpeRatioCard`, etc.) display specific financial metrics.",
        "`cards/KeyMetricCard.tsx`, `cards/InfoCard.tsx`: Reusable UI for displaying metrics.",
        "`charts/*`: Chart components tailored for the dashboard display."
      ],
      "dependencies": ["recharts", "../../stores/appStore", "../../types", "../ui/MetricCard", "@mui/material", "@mui/x-date-pickers", "lucide-react"],
      "notes_and_warnings": ["`DashboardMetrics.tsx` is becoming the primary dashboard. Significant use of mock data in `Dashboard.tsx` and some sub-components needs to be addressed."]
    },
    {
      "name": "React App: Layout Components",
      "patterns": ["packages/react-app/src/components/layout/*.tsx"],
      "description": "Components defining the application's shell, sidebar, and top bar.",
      "responsibilities": [
        "`AppShell.tsx`: Main application structure with sidebar and top bar integration.",
        "`Sidebar.tsx`: Navigation sidebar, handles view changes via `appStore.navigateTo`.",
        "`TopBar.tsx`: Application header displaying date range, search, notifications, user avatar."
      ],
      "dependencies": ["lucide-react", "../../utils/cn", "../../stores/appStore", "date-fns"],
      "guidelines_for_changes": ["Sidebar navigation items are defined in `Sidebar.tsx`[cite: 1089]."]
    },
    {
      "name": "React App: Trade Management Components",
      "patterns": ["packages/react-app/src/components/trades/*.tsx"],
      "description": "Components for displaying and managing trade metadata.",
      "responsibilities": [
        "`TradeMetadataForm.tsx`: Form for editing trade-specific details and emotions.",
        "`TradesTable.tsx`: Table display of trades with edit/delete actions and mark-to-market price input."
      ],
      "dependencies": ["../../types", "../../stores/appStore"],
      "notes_and_warnings": ["`TradesTable.tsx` interacts with `window.electronAPI.updateMarkPrice`."]
    },
    {
      "name": "React App: Transaction Management Components",
      "patterns": ["packages/react-app/src/components/transactions/*.tsx"],
      "description": "Forms for logging and editing individual transactions.",
      "responsibilities": [
        "`EditTransactionForm.tsx`: Modal form for editing transaction details including emotions.",
        "`LogTransactionForm.tsx`: Form for logging new transactions with comprehensive fields."
      ],
      "dependencies": ["react", "../../types", "../../styles/design-tokens"],
      "guidelines_for_changes": ["Ensure form validation is robust and payload matches backend expectations."]
    },
    {
      "name": "React App: UI Primitives",
      "patterns": ["packages/react-app/src/components/ui/*.tsx"],
      "description": "Basic reusable UI components.",
      "responsibilities": [
        "`MetricCard.tsx`: Generic card for displaying metrics with size and status variants."
      ],
      "dependencies": ["framer-motion", "../../utils/cn"]
    },
    {
      "name": "React App: Page Views",
      "patterns": ["packages/react-app/src/views/*.tsx"],
      "description": "Top-level components representing different pages or views of the application.",
      "responsibilities": [
        "`AnalyticsPage.tsx`: Comprehensive analytics display with filters and various charts/tables.",
        "`BackupRestorePage.tsx`: UI for database backup, restore, and data export.",
        "`EditTradeDetailsPage.tsx`: Detailed view of a single trade, allowing transaction editing and mark-to-market updates.",
        "`GroupedPerformanceTabs.tsx`: Tabbed view for grouped performance data.",
        "`LogTransactionPage.tsx`: Page for logging new transactions.",
        "`TradesListPage.tsx`: Displays list of trades with filtering and actions."
      ],
      "dependencies": ["react", "../stores/appStore", "../types", "../components/*", "@mui/material", "@mui/x-date-pickers", "date-fns"],
      "notes_and_warnings": ["These components orchestrate data fetching via `appStore` and display using sub-components."]
    },
    {
      "name": "React App: Build and Configuration",
      "patterns": [
        "packages/react-app/vite.config.ts",
        "packages/react-app/package.json",
        "packages/react-app/postcss.config.js",
        "packages/react-app/eslint.config.js",
        "packages/react-app/tsconfig*.json"
      ],
      "description": "Configuration files for the React app's build process, dependencies, linting, and TypeScript settings.",
      "key_config_points": [
        "vite.config.ts: Vite server port (5173)[cite: 638].",
        "package.json: Frontend dependencies and scripts (`dev`, `build`).",
        "tsconfig.json: TypeScript paths and compiler options[cite: 636]."
      ]
    }
  ]
}