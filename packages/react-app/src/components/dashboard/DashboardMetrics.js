import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
// File: zekenewsom-trade_journal/packages/react-app/src/components/dashboard/DashboardMetrics.tsx
// Modified for Stage 6 to use getAnalyticsData
import { useEffect, useState } from 'react';
import { useAppStore } from '../../stores/appStore';
import { Box, Grid, Typography, CircularProgress, Alert, Paper, Button, Select, MenuItem, InputLabel, FormControl, Avatar, IconButton } from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import SearchIcon from '@mui/icons-material/Search';
import AddIcon from '@mui/icons-material/Add';
import BackupIcon from '@mui/icons-material/Backup';
import FileDownloadIcon from '@mui/icons-material/FileDownload';
import PersonIcon from '@mui/icons-material/Person';
import KeyMetricCard from './cards/KeyMetricCard';
import InfoCard from './cards/InfoCard';
import EquityCurveChart from '../analytics/EquityCurveChart';
import DashboardDrawdownChart from './charts/DashboardDrawdownChart';
import DashboardRMultipleHistogram from './charts/DashboardRMultipleHistogram';
import ReturnVsRiskScatterPlot from './charts/ReturnVsRiskScatterPlot';
import PnlHeatmapCalendar from './charts/PnlHeatmapCalendar';
// import icons as desired from '@mui/icons-material' for InfoCard
const DashboardMetrics = () => {
    const { analytics, isLoadingAnalytics, analyticsError, fetchAnalyticsData } = useAppStore();
    // Header filter state
    const [startDate, setStartDate] = useState(null);
    const [endDate, setEndDate] = useState(null);
    const [selectedStrategy, setSelectedStrategy] = useState('');
    useEffect(() => {
        fetchAnalyticsData({
            ...(startDate ? { startDate: startDate.toISOString() } : {}),
            ...(endDate ? { endDate: endDate.toISOString() } : {}),
            ...(selectedStrategy ? { strategy_id: selectedStrategy } : {})
        });
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [startDate, endDate, selectedStrategy]);
    if (isLoadingAnalytics)
        return (_jsx(Box, { display: "flex", justifyContent: "center", alignItems: "center", minHeight: "50vh", children: _jsx(CircularProgress, {}) }));
    if (analyticsError)
        return (_jsxs(Alert, { severity: "error", sx: { m: 2 }, children: ["Error loading metrics: ", analyticsError] }));
    if (!analytics)
        return _jsx(Typography, { sx: { m: 2 }, children: "No analytics data available for dashboard." });
    // Helpers for formatting
    const formatCurrency = (value) => value === null || value === undefined ? 'N/A' : value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
    return (_jsxs(Box, { sx: { flexGrow: 1, p: 3, backgroundColor: '#161a25', color: '#e0e0e0', minHeight: '100vh' }, children: [_jsx(Paper, { elevation: 2, sx: { mb: 4, p: { xs: 2, md: 3 }, backgroundColor: '#1e2230', color: '#e0e0e0', borderRadius: 3, boxShadow: 3, overflow: 'hidden' }, children: _jsxs(Grid, { container: true, columns: 12, spacing: 2, alignItems: "center", justifyContent: "space-between", wrap: "wrap", children: [_jsx(Grid, { size: { xs: 12, md: 7 }, children: _jsxs(Grid, { container: true, columns: 12, spacing: 2, alignItems: "center", wrap: "wrap", children: [_jsx(Grid, { size: { xs: 12, sm: 6, md: 4, lg: 3 }, children: _jsx(LocalizationProvider, { dateAdapter: AdapterDateFns, children: _jsx(DatePicker, { label: "Start Date", value: startDate, onChange: setStartDate, slotProps: { textField: { size: 'small', sx: { width: '100%', background: '#23263a', input: { color: '#e0e0e0' } } } } }) }) }), _jsx(Grid, { size: { xs: 12, sm: 6, md: 4, lg: 3 }, children: _jsx(LocalizationProvider, { dateAdapter: AdapterDateFns, children: _jsx(DatePicker, { label: "End Date", value: endDate, onChange: setEndDate, slotProps: { textField: { size: 'small', sx: { width: '100%', background: '#23263a', input: { color: '#e0e0e0' } } } } }) }) }), _jsx(Grid, { size: { xs: 12, sm: 6, md: 4, lg: 3 }, children: _jsxs(FormControl, { size: "small", sx: { width: '100%', background: '#23263a' }, children: [_jsx(InputLabel, { id: "strategy-label", sx: { color: '#8be9fd' }, children: "Strategy" }), _jsxs(Select, { labelId: "strategy-label", value: selectedStrategy, label: "Strategy", onChange: e => setSelectedStrategy(e.target.value), sx: { color: '#e0e0e0', '.MuiSelect-icon': { color: '#8be9fd' } }, children: [_jsx(MenuItem, { value: "", children: "All Strategies" }), analytics?.availableStrategies?.map((s) => (_jsx(MenuItem, { value: s.strategy_id, children: s.strategy_name }, s.strategy_id)))] })] }) })] }) }), _jsx(Grid, { size: { xs: 12, md: 5 }, children: _jsxs(Grid, { container: true, spacing: 1, alignItems: "center", justifyContent: { xs: 'flex-start', md: 'flex-end' }, wrap: "wrap", children: [_jsx(Grid, { children: _jsx(Button, { startIcon: _jsx(SearchIcon, {}), variant: "outlined", color: "primary", sx: { borderColor: '#3A7BFF', color: '#8be9fd', borderRadius: 2, px: 2, minWidth: 120 }, children: "Search Trades" }) }), _jsx(Grid, { children: _jsx(Button, { startIcon: _jsx(AddIcon, {}), variant: "contained", color: "primary", sx: { background: '#3A7BFF', borderRadius: 2, px: 2, minWidth: 120 }, onClick: () => { }, children: "Add Trade" }) }), _jsx(Grid, { children: _jsx(Button, { startIcon: _jsx(FileDownloadIcon, {}), variant: "outlined", sx: { borderColor: '#3A7BFF', color: '#8be9fd', borderRadius: 2, px: 2, minWidth: 110 }, children: "Export" }) }), _jsx(Grid, { children: _jsx(Button, { startIcon: _jsx(BackupIcon, {}), variant: "outlined", sx: { borderColor: '#3A7BFF', color: '#8be9fd', borderRadius: 2, px: 2, minWidth: 120 }, children: "Backup Now" }) }), _jsx(Grid, { children: _jsx(IconButton, { sx: { ml: 1 }, children: _jsx(Avatar, { sx: { bgcolor: '#23263a', color: '#8be9fd', width: 36, height: 36, borderRadius: 2 }, children: _jsx(PersonIcon, {}) }) }) })] }) })] }) }), _jsxs(Grid, { container: true, columns: 12, spacing: 3, alignItems: "stretch", children: [_jsxs(Grid, { container: true, columns: 12, spacing: 3, alignItems: "stretch", children: [_jsx(Grid, { size: { xs: 12, md: 4 }, children: _jsx(KeyMetricCard, { title: "Net Account Balance", value: formatCurrency(analytics?.totalRealizedNetPnl) }) }), _jsx(Grid, { size: { xs: 12, md: 4 }, children: _jsx(KeyMetricCard, { title: "Unrealized P&L", value: formatCurrency(analytics?.totalUnrealizedPnl), change: "Auto-refresh 60s" }) }), _jsx(Grid, { size: { xs: 12, md: 4 }, children: _jsx(KeyMetricCard, { title: "Available Buying Power", value: 'N/A', change: 'N/A' }) })] }), _jsxs(Grid, { container: true, columns: 12, spacing: 3, alignItems: "stretch", sx: { mt: 1 }, children: [_jsx(Grid, { size: { xs: 12, md: 3 }, children: _jsx(InfoCard, { title: "Sharpe Ratio", value: "2.37", description: "Good", progress: 75, progressColor: "success" }) }), _jsx(Grid, { size: { xs: 12, md: 3 }, children: _jsx(InfoCard, { title: "Sortino Ratio", value: "3.14", description: "Excellent", progress: 90, progressColor: "success" }) }), _jsx(Grid, { size: { xs: 12, md: 3 }, children: _jsx(InfoCard, { title: "Profit Factor", value: "2.12", description: "Good", progress: 70, progressColor: "success" }) }), _jsx(Grid, { size: { xs: 12, md: 3 }, children: _jsx(InfoCard, { title: "Hit Rate (%)", value: analytics?.winRateOverall !== undefined && analytics?.winRateOverall !== null ? `${(analytics.winRateOverall * 100).toFixed(1)}%` : 'N/A', description: analytics?.winRateOverall && analytics?.winRateOverall > 0.5 ? "Moderate" : "Needs Improvement", progress: analytics?.winRateOverall ? analytics.winRateOverall * 100 : 0, progressColor: analytics?.winRateOverall && analytics?.winRateOverall > 0.5 ? 'info' : 'warning' }) })] }), _jsxs(Grid, { container: true, columns: 12, spacing: 3, alignItems: "stretch", sx: { mt: 1 }, children: [_jsx(Grid, { size: { xs: 12, md: 3 }, children: _jsx(InfoCard, { title: "Experience / Trade", value: 'N/A' }) }), _jsx(Grid, { size: { xs: 12, md: 3 }, children: _jsx(InfoCard, { title: "Ulcer Index", value: 'N/A' }) }), _jsx(Grid, { size: { xs: 12, md: 3 }, children: _jsx(InfoCard, { title: "Current Drawdown", value: 'N/A', valueColor: "#f44336" }) }), _jsx(Grid, { size: { xs: 12, md: 3 }, children: _jsx(InfoCard, { title: "Max Historical Drawdown", value: analytics?.maxDrawdownPercentage ? `-${analytics.maxDrawdownPercentage.toFixed(2)}%` : 'N/A', description: analytics?.maxDrawdownPercentage ? `${formatCurrency((analytics?.totalRealizedNetPnl || 0) * (analytics?.maxDrawdownPercentage / 100))}` : 'N/A', progress: analytics?.maxDrawdownPercentage || 0, valueColor: "#f44336" }) }), _jsx(Grid, { size: { xs: 12, md: 3 }, children: _jsx(InfoCard, { title: "1-Day 95% VaR", value: 'N/A' }) })] }), _jsx(Grid, { size: { xs: 12 }, children: _jsx(Typography, { variant: "h6", sx: { mb: 2, mt: 2, color: '#50fa7b' }, children: "CHARTS" }) }), _jsx(Grid, { size: { xs: 12, md: 8 }, children: _jsxs(Paper, { sx: { p: 2, backgroundColor: '#1e2230', color: '#e0e0e0', height: '400px' }, children: [_jsx(Typography, { variant: "subtitle2", sx: { color: '#8be9fd', textAlign: 'center', mb: 1 }, children: "Cumulative Equity Curve" }), analytics.equityCurve && analytics.equityCurve.length > 0 ? (_jsx(EquityCurveChart, { equityCurve: analytics?.equityCurve })) : (_jsx(Typography, { children: "No equity curve data." }))] }) }), _jsx(Grid, { size: { xs: 12, md: 4 }, children: _jsxs(Grid, { container: true, direction: "column", spacing: 3, children: [_jsx(Grid, { size: { xs: 12 }, children: _jsxs(Paper, { sx: { p: 1, backgroundColor: '#1e2230', color: '#e0e0e0', height: '188px' }, children: [_jsx(Typography, { variant: "subtitle2", sx: { color: '#8be9fd', textAlign: 'center', mb: 1 }, children: "Drawdown Curve" }), analytics.equityCurve && analytics.equityCurve.length > 0 ? (_jsx(DashboardDrawdownChart, { equityCurveData: analytics?.equityCurve })) : (_jsx(Typography, { children: "No drawdown data." }))] }) }), _jsx(Grid, { size: { xs: 12 }, children: _jsxs(Paper, { sx: { p: 1, backgroundColor: '#1e2230', color: '#e0e0e0', height: '188px' }, children: [_jsx(Typography, { variant: "subtitle2", sx: { color: '#8be9fd', textAlign: 'center', mb: 1 }, children: "R-Multiple Histogram" }), analytics?.rMultipleDistribution && analytics?.rMultipleDistribution.length > 0 ? (_jsx(DashboardRMultipleHistogram, { data: analytics?.rMultipleDistribution })) : (_jsx(Typography, { children: "No R-Multiple data." }))] }) })] }) }), _jsx(Grid, { size: { xs: 12, md: 6 }, children: _jsx(ReturnVsRiskScatterPlot, {}) }), _jsx(Grid, { size: { xs: 12, md: 6 }, children: _jsx(PnlHeatmapCalendar, {}) })] })] }));
};
export default DashboardMetrics;
